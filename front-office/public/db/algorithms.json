[
    {
        "id": "1528343109",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "Si nous voulons afficher un message, nous utilisons les instructions suivantes :",
        "algo": "Ecrire (\u2018Le message \u00e0 afficher\u2019) ",
        "py_el": "print ('Le message \u00e0 afficher')",
        "title": "Affichage",
        "code_python": "print (2) -> 2\nprint ('bac 2024') -> bac 2024",
        "code_algo": "ecrire(2)\necrire('bac 2024')",
        "comments": "Pour renvoier deux messages \u00e9crits avec des commandes print () distinctes sur la m\u00eame ligne, \non utilise le syntaxe suivant :\n    print  ('bac 2024', end = '')\n    print  ('Admis')\nDans ce cas le programme donne \uf0e0 bac 2024Admis\n",
        "use_function" : "Affichage(`2\nbac 2024`)"
    },
    {
        "id": "1635936684",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "Si on veut cr\u00e9er une variable x de type entier et on veut lui donner la valeur 2, on utilise les \nsyntaxes donn\u00e9es par le tableau suivant :",
        "algo": "x <- 5",
        "py_el": "x = 5",
        "title": "Affectation",
        "code_python": "x = 9.96\nch = 'bac'\nn = 10",
        "code_algo": "x< <- 9.96\nch <- 'bac'\nn <- 10",
        "comments": "Cette op\u00e9ration est dite affectation : C\u2019est-\u00e0-dire mettre la valeur 10 dans la variable n (on dit n \nre\u00e7oit 10 ou n prend la valeur 10).\n\nPour afficher un message, il faut l\u2019\u00e9crire entre deux c\u00f4tes '', en informatique il y\u2019a diff\u00e9rence \nd\u2019\u00e9crire : Ecrire(n) et Ecrire ('n') ainsi que print (n) et print ('n')\n\n\nDans le premier cas (sans apostrophes) signifie qu\u2019on veut afficher le contenu de la variable n \ndonc le programme affiche 10 alors qu\u2019avec les deux apostrophes le programme affichera la \nlettre n tel qu\u2019elle est \u00e9crite.\n",
        "use_function":""
    },
    {
        "id": "4516683029",
        "image_uploader": null,
        "image_uploader_py": "images_python\\Capture d\u2019\u00e9cran 2024-07-31 130418.jpg",
        "image_uploader_res": null,
        "description": "Pour donner l\u2019acc\u00e8s \u00e0 l\u2019utilisateur de saisir des donn\u00e9s par le clavier, on doit utiliser les \ninstructions suivantes :",
        "algo": "lire(n)",
        "py_el": "n = input()",
        "title": "Saisie de donn\u00e9e",
        "code_python": "ch = input('Donner un nom non vide: ')\nn = input('donner un entier : ')\n",
        "code_algo": "ecrire('Donner un nom non vide: ')\nlire(ch)\n\necrire('donner un entier : ')\nlire(n)",
        "comments": "Python nous a permis de diminuer le nombre des lignes et de combiner l\u2019affichage du \nmessage avec le saisi du donn\u00e9.\nEt donc \u00e7a sera : ch=input ('Donner un nom non vide') au lieu d\u2019\u00e9crire : print  (\"Donner un entier\")\nn = input ()\n",
        "use_function": ""
    },
    {
        "id": "4908912092",
        "image_uploader": null,
        "image_uploader_py": "images_python\\Capture d\u2019\u00e9cran 2024-07-31 131425.jpg",
        "image_uploader_res": null,
        "description": "Donne la racine carr\u00e9e \nd\u2019un r\u00e9el x",
        "algo": "Racine_carr\u00e9e(n)",
        "py_el": "sqrt(n)",
        "title": "Les fonctions sur les types num\u00e9riques",
        "code_python": "from math import sqrt\nx = 4\nr = sqrt(x)\nprint (r)\n",
        "code_algo": "x <- 4\nr <- racine_carr\u00e9e(x)\necrire(r)",
        "comments": null,
        "use_function":"Racine(16)"
    },
    {
        "id": "5922799518",
        "image_uploader": null,
        "image_uploader_py": "images_python\\Capture d\u2019\u00e9cran 2024-07-31 140227.jpg",
        "image_uploader_res": null,
        "description": "Donne la valeur absolu \nd\u2019un r\u00e9el x",
        "algo": "abs(x)",
        "py_el": "abs(x)",
        "title": "Les fonctions sur les types num\u00e9riques",
        "code_python": "x = -4\na = abs(x)\nprint (a)\n",
        "code_algo": "x <- -4\na <- abs(x)\necrire(a)\n",
        "comments": null,
        "use_function":"Abs(-4)"
    },
    {
        "id": "5105231701",
        "image_uploader": null,
        "image_uploader_py": "images_python\\Capture d\u2019\u00e9cran 2024-07-31 141057.jpg",
        "image_uploader_res": null,
        "description": "Enl\u00e8ve la partie \nd\u00e9cimale d\u2019un r\u00e9el x",
        "algo": "Tronc(x)",
        "py_el": "trunc(x)",
        "title": "Les fonctions sur les types num\u00e9riques",
        "code_python": "import math\n\nresult = math.trunc(2.6)\nprint (result)  # Output: 2\n\n",
        "code_algo": "result <- Tronc(2.6)\necrire(result) \n#output: 2",
        "comments": "Type du r\u00e9sultat : entier",
        "use_function":"Tronc(2.6)"
    },
    {
        "id": "2739915426",
        "image_uploader": null,
        "image_uploader_py": "images_python\\Capture d\u2019\u00e9cran 2024-07-31 151206.jpg",
        "image_uploader_res": null,
        "description": "Donne l\u2019entier le plus \nproche du r\u00e9el x",
        "algo": "Arrondi(x)",
        "py_el": "round(x) ",
        "title": "Les fonctions sur les types num\u00e9riques",
        "code_python": "x = 2.6 # > 0.5\ny = 2.5 # = 0.5\nz = 2.4 # < 0.5\nprint (round(x))\nprint (round(y))\nprint (round(z))\n",
        "code_algo": "x <- 2.6 # > 0.5\ny <- 2.5 # = 0.5\nz <- 2.4 # < 0.5\necrire(Arrondi (x) )\necrire(Arrondi (y) )\necrire(Arrondi (z) )\n\n",
        "comments": "x = 5.5 -> arrondi(x) = 5 \nx = 5.51 -> arrondi(x) = 6",
        "use_function":"Arrondi(2.6)"
    },
    {
        "id": "4902817087",
        "image_uploader": null,
        "image_uploader_py": "images_python\\Capture d\u2019\u00e9cran 2024-07-31 155609.jpg",
        "image_uploader_res": null,
        "description": "Donne x puissance y",
        "algo": "pow(x,y)",
        "py_el": "n = pow(x,y)",
        "title": "Les fonctions sur les types num\u00e9riques",
        "code_python": "n = pow(2,4)\nprint (n)\n",
        "code_algo": "n <- pow(2,4)\necrire(n)",
        "comments": null,
        "use_function":"Pow(2,4)"
    },
    {
        "id": "2073427509",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "Donne un entier \nal\u00e9atoire entre x et y",
        "algo": "Al\u00e9a (x,y)",
        "py_el": "randint(x,y)",
        "title": "Les fonctions sur les types num\u00e9riques",
        "code_python": "from random import *\n\nn = randint(1,10)\nprint (n)\n",
        "code_algo": "n <- al\u00e9a(1,10)\necrire(n)\n",
        "comments": "intervale [i,f]",
        "use_function":"Random_integer_number()"
        
    },
    {
        "id": "4623735924",
        "image_uploader": null,
        "image_uploader_py": "images_python\\Capture d\u2019\u00e9cran 2024-07-31 160653.jpg",
        "image_uploader_res": null,
        "description": "Donne un r\u00e9el al\u00e9atoire \nentre x et y",
        "algo": "Al\u00e9a (x,y)",
        "py_el": "uniform",
        "title": "Les fonctions sur les types num\u00e9riques",
        "code_python": "from random import *\n\nn = uniform(1,10)\nprint (n)\n",
        "code_algo": "n <- al\u00e9a(1,10)\necrire(n)\n",
        "comments": "donner un nombre reel ",
        "use_function":"Random_float_number()"
    },
    {
        "id": "2403790751",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "Ces structures sont utilis\u00e9es lorsque le programmeur souhait de v\u00e9rifier la validation de \ncertaines conditions n\u00e9cessaires pour le travail.\n",
        "algo": "Si Condition alors",
        "py_el": "if Condition :",
        "title": "Les structures de  contr\u00f4le conditionnelles",
        "code_python": "if Condition : \n R\u00e9sultat1\nelif condition 2 :\n R\u00e9sultat 2 \nelif condition 3 :\n R\u00e9sultat 3\n.\n.\n.\nelif condition n-1 :\n R\u00e9sultat n-1\nelse  :\n R\u00e9sultat n",
        "code_algo": "Si Condition alors R\u00e9sultat 1\nSinon si Condition 2 alors R\u00e9sultat 2\nSinon Si Condition 3 alors R\u00e9sultat 3\n.\n.\n.\nSinon si Condition n-1 alors R\u00e9sultat n-1\nSinon R\u00e9sultat n\nFin Si",
        "comments": "On n\u2019\u00e9crit jamais une condition avec sinon (else )",
        "use_function":""
    },
    {
        "id": "6764320979",
        "image_uploader": "images_python\\div-mod.png",
        "image_uploader_py": "images_python\\Capture d\u2019\u00e9cran 2024-07-31 164517.jpg",
        "image_uploader_res": null,
        "description": "En informatique, l'op\u00e9ration modulo, ou op\u00e9ration mod, est une op\u00e9ration binaire qui associe, dans le cas de deux entiers naturels, le reste de la division euclidienne du premier par le second, le reste de la division de a par n (n \u2260 0) est not\u00e9 a mod n (ou a % n dans certains langages informatiques).",
        "algo": "x mod 10",
        "py_el": "x % 10",
        "title": "Les symboles de comparaison",
        "code_python": "print (24%10) # 4\nprint (4%2) #reste = 0\n",
        "code_algo": "ecrire(24 mod 10) # 4\necrire(4 mod 2) #reste = 0\n",
        "comments": "Il est \u00e9vident de penser \u00e0 utiliser la division euclidienne de l\u2019entier donn\u00e9 par l\u2019utilisateur par \n10. ",
        "use_function":"Mod(24,10)"
    },
    {
        "id": "2802919876",
        "image_uploader": "images_python\\div-mod.png",
        "image_uploader_py": "images_python\\Capture d\u2019\u00e9cran 2024-07-31 165906.jpg",
        "image_uploader_res": null,
        "description": "un r\u00f4le de division dans un algorithme peut impliquer diverses t\u00e2ches selon le contexte.",
        "algo": "x div 10",
        "py_el": "x // 10",
        "title": "Les symboles de comparaison",
        "code_python": "print (24//10) # 4\nprint (4//2) #quotient = 2\n",
        "code_algo": "ecrire(24 div 10) # 2\necrire(4 div 2) #quotient = 2\n",
        "comments": "L\u2019id\u00e9e est de s\u00e9parer le chiffre d\u2019unit\u00e9 du chiffre de dizaine.\nIl est \u00e9vident de penser \u00e0 utiliser la division euclidienne de l\u2019entier donn\u00e9 par l\u2019utilisateur par \n10.",
        "use_function":"DIV(24,10)"
    },
    {
        "id": "1233522794",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "c'est un  symbole de comparaison en python",
        "algo": "=",
        "py_el": "==",
        "title": "Les symboles de comparaison",
        "code_python": "a = 3\nb = 5\nif a == b:\n\tprint ( True  )\nelse :\n\tprint ( False )\n",
        "code_algo": "a <- 3\nb <- 5\nsi a = b alors\n\tecrire(Vrai)\nsinon\n\tecrire(Faux)\n",
        "comments": null,
        "use_function":"comparaison(3,5)"
    },
    {
        "id": "9641717889",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "c'est un  symbole de comparaison en python",
        "algo": "et",
        "py_el": "and",
        "title": "Les symboles de comparaison",
        "code_python": "a = 5\nb = 6\nif a and b:\n\tprint ( True  )\nelse :\n\tprint ( False )\n",
        "code_algo": "a <- 3\nb <- 5\nsi a et b alors\n\tecrire(Vrai)\nsinon\n\tecrire(Faux)\n",
        "comments": null,
        "use_function":""
    },
    {
        "id": "9175315732",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "c'est un  symbole de comparaison en python",
        "algo": "ou",
        "py_el": "or",
        "title": "Les symboles de comparaison",
        "code_python": "a = 5\nb = 6\nif a or b:\n\tprint ( True  )\nelse :\n\tprint ( False )\n",
        "code_algo": "a <- 3\nb <- 5\nsi a ou b alors\n\tecrire(Vrai)\nsinon\n\tecrire(Faux)\n",
        "comments": null,
        "use_function":""
    },
    {
        "id": "7326798955",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "On a 256 caract\u00e8res (255 (clavier) + \u2019\u2019 vide)\nChaque caract\u00e8re a un code ASCII (American Standard Code for Information Interchange)",
        "algo": "ch <- 'Bac 2024'",
        "py_el": "ch = 'Bac 2024'",
        "title": "Chaine de caract\u00e8res et  ses m\u00e9thodes",
        "code_python": "ch = 'Bac 2024 Admis'\nprint (ch)\n",
        "code_algo": "ch <- 'Bac 2024 Admis'\necrire(ch)\n",
        "comments": "L\u2019outil ch[i] tel que les i sont indices des caract\u00e8res num\u00e9rot\u00e9s de 0 \u00e0 long (ch) \u2013 1, nous \npermet d\u2019acc\u00e9der en mode lecture \u00e0 chaque caract\u00e8re de la chaine"
        ,"use_function":""
    },
    {
        "id": "4061629326",
        "image_uploader": null,
        "image_uploader_py": "images_python\\Capture d\u2019\u00e9cran 2024-08-01 231339.jpg",
        "image_uploader_res": null,
        "description": "L\u2019outil ch[i] tel que les i sont indices des caract\u00e8res num\u00e9rot\u00e9s de 0 \u00e0 long (ch) \u2013 1, nous \npermet d\u2019acc\u00e9der en mode lecture \u00e0 chaque caract\u00e8re de la chaine",
        "algo": "ch1 <- ch2[id:if]",
        "py_el": "ch1 = ch2[id;if]",
        "title": "Extraction d\u2019une sous cha\u00eene",
        "code_python": "ch1 = 'bac math 2024'\nch2 = ch1[0:3]\nprint (ch2)\n",
        "code_algo": "ch1 <- 'bac math 2024'\nch2 <- ch1[0:3]\necrire(ch2)\n",
        "comments": "ch[id : if ] \nid : indice de d\u00e9but \nif : indice de fin \u2013 1\nch = \u2019python\u2019 \nch[0 : 3] \uf0e0 donne \u2019 pyt \u2019\nch[2 :] \uf0e0 donne \u2019 thon \u2019\nch[-2 :] \uf0e0 donne \u2019 on \u2019\nch[: :2] \uf0e0 donne \u2019 pto \u2019\nch[: :- 2] \uf0e0 donne \u2019 nhy \u2019\n3.4. Concat\u00e9nation et multiplication\n\"formation\"+\"python\"\uf0e0 donne \"formationpython\"\nCh = \"a\" * 5 \uf0e0 donne ch = \"aaaaa\"",
        "use_function":"Sous_chaine(\"bac math 2024\",0,3)"
    },
    {
        "id": "1204438996",
        "image_uploader": null,
        "image_uploader_py": "images_python\\Capture d\u2019\u00e9cran 2024-08-01 233210.jpg",
        "image_uploader_res": null,
        "description": "Code ASCII du caract\u00e8re x",
        "algo": "ord(x)",
        "py_el": "ord(x)",
        "title": "Les m\u00e9thodes",
        "code_python": "a = ord('a')\nA = ord('A')\nprint (a)\nprint (A)\n",
        "code_algo": "a <- ord('a')\nA <- ord('A')\necrire(a)\necrire(A)\n",
        "comments": "a = ord('a') # -> 97\nz = ord('z') # -> 122\nA = ord('A') # -> 65\nZ = ord('Z') # -> 90 \nprint (a)\nprint (z)\nprint (A)\nprint (Z)\n",
        "use_function":"Ord('a')"
    },
    {
        "id": "5883057174",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "Caract\u00e8re dont le code ASCII est x",
        "algo": "chr(x)",
        "py_el": "chr(x)",
        "title": "Les m\u00e9thodes",
        "code_python": "chr(65) -> \u2019A\u2019\nchr(97) -> \u2019a\u2019",
        "code_algo": "Chr(65) -> \u2019A\u2019\nChr(97) -> \u2019a\u2019",
        "comments": null,
        "use_function":"Chr(65)"
    },
    {
        "id": "7274725113",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "Taille de la cha\u00eene",
        "algo": "Long (ch)",
        "py_el": "len(ch)",
        "title": "Les m\u00e9thodes",
        "code_python": "ch = 'bac 2024'\nl = len(ch)\nprint (l)\n",
        "code_algo": "ch <- 'bac 2024'\nl <- long(ch)\necrire(l)\n",
        "comments": "",
        "use_function":"Long('bac 2024')"
    },
    {
        "id": "7820206660",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "Retourne la premi\u00e8re \nposition de la cha\u00eene ch1 \ndans la cha\u00eene ch2",
        "algo": "Pos (ch1, ch2)",
        "py_el": "ch2.find(ch1) ",
        "title": "Les m\u00e9thodes",
        "code_python": "Ch1='2'\nCh2 = '2020'\nPos (ch1,ch2) # = 0",
        "code_algo": "Ch1<-\u20192\u2019\nCh2 <- \u20192020\u2019\nPos (ch1,ch2) # = 0",
        "comments": "ch1 = 'bac'\nch2 = 'fac'\np = ch1.find(ch2[0]) # retourner -1\n",
        "use_function":"Pos('2','2020')"
    },
    {
        "id": "5520572823",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "Retourne une partie de la \ncha\u00eene ch \u00e0 partir de la \nposition id jusqu\u2019\u00e0 la \nposition if -1",
        "algo": "Sous_cha\u00eene (ch,id,if)",
        "py_el": "Ch [id :if]",
        "title": "Sous_cha\u00eene (ch, p, n)",
        "code_python": "ch = 'informatique'\nch2 = ch[2:5]\nprint (ch2)\n#le programme affiche : for\n",
        "code_algo": "ch <- 'informatique'\nch2 <- ch[2:5]\necrire(ch2)",
        "comments": "print ('python'[-1]) # n\n",
        "use_function":"Sous_chaine('informatique',2,5)"
    },
    {
        "id": "3398605665",
        "image_uploader": null,
        "image_uploader_py": "images_python\\Capture d\u2019\u00e9cran 2024-08-02 000139.jpg",
        "image_uploader_res": null,
        "description": "Efface des caract\u00e8res de \nla cha\u00eene ch \u00e0 partir de la \nposition d jusqu\u2019\u00e0 la \nposition f (f exclue).",
        "algo": "Effacer(ch, d, f)",
        "py_el": "Ch[:d]+ch[f :]",
        "title": "Les m\u00e9thodes",
        "code_python": "ch = 'informatique'\nch2 = ch[:4] + ch[7:]\nprint  (ch2)\n",
        "code_algo": "ch <- 'informatique'\nch2 <- ch[:4] + ch[7:]\necrire (ch2)\n",
        "comments": null,
        "use_function":"efface('informatique',4,7)"
    },
    {
        "id": "7604889972",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "Convertir le nombre n en \nune cha\u00eene de caract\u00e8res",
        "algo": "Convch (n, ch)",
        "py_el": "Ch = str (n) ",
        "title": "Les m\u00e9thodes",
        "code_python": "n = 2020\nch = str(n) # \"2024\"",
        "code_algo": "Ch <- Convch(2020) # \"2024\"\n",
        "comments": "  ",
        "use_function":"Convch(2024)"
    },
    {
        "id": "7559698425",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "Convertir une cha\u00eene de \ncaract\u00e8re en une valeur \nnum\u00e9rique (sinon erreur)\n",
        "algo": "Valeur (ch) ",
        "py_el": "int or float",
        "title": "Les m\u00e9thodes",
        "code_python": "ch = '24'\nn = int(ch)\nprint (n)\n",
        "code_algo": "ch <- '24'\nn <- valeur(ch)\necrire(n)\n",
        "comments": "Convertir une cha\u00eene par un valeur",
        "use_function":"Valeur('24','entier')"
    },
    {
        "id": "5975657591",
        "image_uploader": null,
        "image_uploader_py": "images_python\\Capture d\u2019\u00e9cran 2024-08-02 005521.jpg",
        "image_uploader_res": null,
        "description": "Convertir ch en majuscule ",
        "algo": "Majus (ch)",
        "py_el": "ch.upper()",
        "title": "Les m\u00e9thodes",
        "code_python": "ch = 'bac math 2024'\nprint (ch.upper())\n",
        "code_algo": "ch <- 'bac math 2024'\necrire(majus(ch))\n",
        "comments": "\u2019python\u2019.upper() -> donne \u2019PYTHON\u2019",
        "use_function":"Majus('bac math 2024')"
    },
    {
        "id": "9902136453",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "Il s\u2019agit d\u2019une structure it\u00e9rative utilis\u00e9e lorsqu\u2019il y\u2019a une r\u00e9p\u00e9tition d'une suite d'instructions \nd\u2019un nombre fini de fois connu \u00e0 l'avance.",
        "algo": "Pour i de 0 \u00e0 n-1 faire \n Traitement \u00e0 r\u00e9p\u00e9ter \nFin Pour\n",
        "py_el": "for i in range  (n) :\n Traitement \u00e0 r\u00e9p\u00e9ter",
        "title": "Les structures de  contr\u00f4le it\u00e9ratives",
        "code_python": "for i in range (5):\n\tprint ('python')\n",
        "code_algo": "pour i de 0 \u00e0 4 faire\n\tecrire('python')\n",
        "comments": "La variable i d\u00e9signe le compteur de la boucle : par d\u00e9faut i commence du 0 jusqu\u2019\u00e0 n-1, \nl\u2019incr\u00e9mentation du compteur est automatique avec un pas = 1",
        "use_function":"Boucle_Pour(0,5)"
    },
    {
        "id": "7890348954",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "La boucle while r\u00e9p\u00e8te le bloc d\u2019instruction lorsque la condition d\u2019entr\u00e9e est v\u00e9rifi\u00e9e et \nretourne apr\u00e8s une it\u00e9ration pour v\u00e9rifier encore. L\u2019it\u00e9ration s\u2019arr\u00eate lorsque la condition n\u2019est \nplus v\u00e9rifi\u00e9e",
        "algo": "Tant que condition d\u2019entr\u00e9e faire\n Traitement \u00e0 r\u00e9p\u00e9ter\nFin Tant que",
        "py_el": "while condition d\u2019entr\u00e9e :\n Traitement \u00e0 r\u00e9p\u00e9ter",
        "title": "Les structures de  contr\u00f4le it\u00e9ratives",
        "code_python": "ok =  False \ni = 0\n\nwhile ok ==  False :\n\tif i == 10:\n\t\tok =  True  \n\telse :\n\t\ti = i +1\n",
        "code_algo": "ok <- faux\ni <- 0\n\ntantque ok = faux faire\n\tsi i = 10 alors\n\t\tok <- vrai\n\tsinon\n\t\ti <- i +1\n    fin si\nfin tantque",
        "comments": null,
        "use_function":""
    },
    {
        "id": "5658909779",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "Sans faire une v\u00e9rification pour la premi\u00e8re it\u00e9ration, la boucle r\u00e9p\u00e9ter refait le bloc \nd\u2019instruction jusqu\u2019\u00e0 la condition de sortie sera v\u00e9rifi\u00e9e, dans ce cas on n\u2019aura plus de \nr\u00e9p\u00e9tition",
        "algo": "R\u00e9p\u00e9ter\n Traitement \u00e0 r\u00e9p\u00e9ter\nJusqu\u2019\u00e0 condition de sortie",
        "py_el": "test =  True  \nwhile test :\n Traitement \u00e0 r\u00e9p\u00e9ter\n if condition de sortie :\n test =  False ",
        "title": "Les structures de  contr\u00f4le it\u00e9ratives",
        "code_python": "i = 0\nwhile not i = 5:\n\ti = i + 1\n        ",
        "code_algo": "i <- 0\nR\u00e9p\u00e9ter\n\ti <- i + 1\n Jusqu\u2019\u00e0 i = 5",
        "comments": "\n",
        "use_function":""
    },
    {
        "id": "4601815660",
        "image_uploader": "images_python\\Capture d\u2019\u00e9cran 2024-08-02 022512.jpg",
        "image_uploader_py": "images_python\\Capture d\u2019\u00e9cran 2024-08-02 022657.jpg",
        "image_uploader_res": "images_python\\Capture d\u2019\u00e9cran 2024-08-02 022745.jpg",
        "description": "Un tableau unidimensionnel (ou vecteur) est une structure de donn\u00e9es permettant de\nrange r (regrouper) un nombre fini d\u2019\u00e9l\u00e9ments de m\u00eame type.\nUn vecteur/ tableau est caract\u00e9ris\u00e9 par :\n* Son nom (un identificateur unique. Exemple : T, V, U, \u2026)\n* Sa taille (nombre d\u2019\u00e9l\u00e9ments. Exemple : 20, 30, 100, \u2026)\n* Son type (le type des \u00e9l\u00e9ments qu\u2019il contient. Exemple : entier, r\u00e9el, caract\u00e8res,\u2026)",
        "algo": "Nom_de_type =tableau de taille de type",
        "py_el": "from numpy import *\nT=array([type_de_donner] *taille)\n",
        "title": "Tableau",
        "code_python": "from numpy import *\n\nt = array([int]*5)\nfor i in range (5):\n\tt[i] = int(input(\"donner un entier: \"))\n",
        "code_algo": "pour i de 0 \u00e0 4 faire\n\tecrire(\"donner un entier: \")\n\tlire(t[i])",
        "comments": "La d\u00e9claration d\u2019un tableau permet d\u2019associer \u00e0 un nom une zone \nm\u00e9moire compos\u00e9e d\u2019un certain nombres de cases m\u00e9moires de m\u00eame \ntype. \nSyntaxe : \nVariable identificateur : tableau[indice_min .. indice_max] de type \nOu bien \nVariable identificateur : tableau[taille] de type \nNotes : \n\uf0b7 Le premier \u00e9l\u00e9ment d\u2019un tableau porte l\u2019indice z\u00e9ro ou l\u2019indice 1 \nselon les langages. \n* La valeur d\u2019un indice doit \u00eatre un nombre entier. \n* La valeur d\u2019un indice doit \u00eatre inf\u00e9rieure ou \u00e9gale au nombre \nd\u2019\u00e9l\u00e9ments du tableau. Par exemple, avec le tableau tab[1 .. 20], il \nest impossible d'\u00e9crire tab[0] et tab[21]. Ces expressions font \nr\u00e9f\u00e9rence \u00e0 des \u00e9l\u00e9ments qui n'existent pas. \n",
        "use_function":""
    },
    {
        "id": "9850244258",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "Une proc\u00e9dure est un sous-programme qui permet la r\u00e9solution d\u2019un probl\u00e8me donn\u00e9 et qui \npeut avoir plusieurs r\u00e9sultats \u00e0 partir d\u2019un ou plusieurs param\u00e8tresdonn\u00e9s",
        "algo": "Proc\u00e9dure nom_proc\u00e9dure (Mode de passage + Liste des param\u00e8tres formels : Type)\nD\u00e9but\n\tTraitement\nFin",
        "py_el": "def nom_procedure(param\u00e9tres):\n    \"Traitement\"\n    \"Traitement\"\n",
        "title": "Sous-Programme",
        "code_algo": "Proc\u00e9dure Saisie ( @ n : entier) \nD\u00e9but\nR\u00e9p\u00e9ter \n\tEcrire(\u2019\u2019 Donner un entier\u2019\u2019)\n\tLire (n)\nJusqu\u2019\u00e0 (n>=0) et (n<=20)\nFin ",
        "code_python": "def Saisie():\n    global n\n    n = int(input('donner un entier: '))\n    while not 0<=n<=20:\n\tn = int(input('donner un entier: '))\n\nSaisie()",
        "comments": "Si le contenu d\u2019une une variable globale dans une proc\u00e9dure change en passant par le \ntraitement, on \u00e9crit \u00ab @ \u00bb avant la variable dans l\u2019ent\u00eate de la d\u00e9claration de la proc\u00e9dure (on \nappelle \u00e7a passage par variable) sinon on n\u2019\u00e9crit rien (on appelle \u00e7a passage par valeur)\nLa notion du mode de passage est valable seulement pour les proc\u00e9dures.",
        "use_function":""
    },
    {
        "id": "4358898044",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "On appelle un algorithme en tant que fonction, tout traitement qui a pour objectif le calcul ou \nla d\u00e9termination d\u2019un seul r\u00e9sultat, retourne une seule variable comme r\u00e9sultat final.\nC\u2019est-\u00e0-dire une fonction est un sous-programme qui retourne un r\u00e9sultat \nunique de type simple (entier, r\u00e9el, bool\u00e9en, caract\u00e8re, cha\u00eene de caract\u00e8res).",
        "algo": "Fonction nom_fonction (Liste des param\u00e8tres formels : Type) : Type du r\u00e9sultat retourn\u00e9\nD\u00e9but\n    Traitement\n    Retourner nom_variable contenant le r\u00e9sultat calcul\u00e9\nFin",
        "py_el": "def nom_fonction(param\u00e8tres):\n    \"Traitement\"\n    \"Traitement\"\n    return resultat",
        "title": "Sous-Programme",
        "code_python": "def recherch(x):\n\tok =  False \n\tfor i in range (n):\n\t\tif x == t[i]:\n\t\t\t\tok =  True  \n\treturn ok",
        "code_algo": "fonction recherch(x:entier): booleen\n    debut\n    ok = faux\n    pour i de 0 \u00e0 n-1 faire\n        si x = t[i]alors\n            ok = vrai\n        fin si\n    fin pour\n    retourner ok\n    fin ",
        "comments": "On appelle x param\u00e8tre formels c\u2019est-\u00e0-dire il prend un nom de variable quelconque lors de la \nd\u00e9claration du sous-programme mais apr\u00e8s dans l\u2019appelle de la fonction, le programme \nfonctionne r\u00e9ellement avec m et n qui sont des param\u00e8tres effectifs. \nLa notion des param\u00e8tres formels et effectifs est valable aussi pour les proc\u00e9dures",
        "use_function":"recherche(2,[5,4,8,9,14,7,10,2])"
    },
    {
        "id": "7019168326",
        "image_uploader": null,
        "image_uploader_py": null,
        "image_uploader_res": null,
        "description": "La fonction estnum est une fonction bool\u00e9enne qui renvoie VRAI si la case test\u00e9e contient un nombre.",
        "algo": "Estnum(x)",
        "py_el": "x.isnumeric()",
        "title": "Les m\u00e9thodes",
        "code_python": "x = '225'\nprint (x.isnumeric()) #  True  \n\nx = \"22a5\"\nprint (x.isnumeric()) #  False \n\n",
        "code_algo": "x <- '225'\necrire(estnum(x)) # vrai\n\nx <- \"22a5\"\necrire(estnum(x)) # faux\n\n",
        "comments": "type estnum : booleen {vrai ou faux)",
        "use_function":"Estnum('255')"
    },
    {
        "id": "4363026331",
        "title": "Qt Designer",
        "video_title_1": "[PYTHON] - #Bac_3eme Qt Design (Partie 1)",
        "video_embed_1": "<iframe width=\"100%\" height=\"480\" src=\"https://www.youtube.com/embed/T3MBb85n_hY\" title=\"[PYTHON] - #Bac_3eme  Qt Design (Partie 1)\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>",
        "video_title_2": "[PYTHON] - #Bac_3eme Qt design ( partie 2 )",
        "video_embed_2": "<iframe width=\"100%\" height=\"480\" src=\"https://www.youtube.com/embed/Bi-cg-2OqBg\" title=\"[PYTHON] - #Bac_3eme  Qt design ( partie 2 )\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>",
        "video_title_3": "[PYTHON] - #Bac_3eme Qt Design ( partie 3 )",
        "video_embed_3": "<iframe width=\"100%\" height=\"480\" src=\"https://www.youtube.com/embed/uiC8iTyQB1k\" title=\"[PYTHON] - #Bac_3eme Qt Design (  partie 3 )\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>",
        "video_title_4": "[PYTHON] - #Bac_3eme Qt Design ( partie 4 )",
        "video_embed_4": "<iframe width=\"100%\" height=\"480\" src=\"https://www.youtube.com/embed/fuV2zdAbUf4\" title=\"[PYTHON] - #Bac_3eme  Qt Design ( partie 4 )\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>",
        "channel_id": "https://www.youtube.com/@EliosAcademy",
        "channel_name": "Elios Academy",
        "channel_img": "https://yt3.googleusercontent.com/JMXOpf78SxvGXAytr1UYD9leIAXnUKQuyZqWchyl5ImH7oOLDyKKjXzuzcMuEOUmYV1crU0cgg=s160-c-k-c0x00ffffff-no-rj"
    }
]